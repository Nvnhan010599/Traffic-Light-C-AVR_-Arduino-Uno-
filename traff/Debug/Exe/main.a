;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/17/2020
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega328P
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;// Declare your global variables here
;
;#define DATA_REGISTER_EMPTY (1<<UDRE0)
;#define RX_COMPLETE (1<<RXC0)
;#define FRAMING_ERROR (1<<FE0)
;#define PARITY_ERROR (1<<UPE0)
;#define DATA_OVERRUN (1<<DOR0)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0=0,rx_rd_index0=0;
;#else
;unsigned int rx_wr_index0=0,rx_rd_index0=0;
;#endif
;
;#if RX_BUFFER_SIZE0 < 256
;unsigned char rx_counter0=0;
;#else
;unsigned int rx_counter0=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0037 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0038 char status,data;
; 0000 0039 status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 003A data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003C    {
; 0000 003D    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003E #if RX_BUFFER_SIZE0 == 256
; 0000 003F    // special case for receiver buffer size=256
; 0000 0040    if (++rx_counter0 == 0) rx_buffer_overflow0=1;
; 0000 0041 #else
; 0000 0042    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0043    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0044       {
; 0000 0045       rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 0046       rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0047       }
; 0000 0048 #endif
; 0000 0049    }
;PCODE: $00000029 VOL: 0
; 0000 004A }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0051 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0052 char data;
; 0000 0053 while (rx_counter0==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0054 data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0055 #if RX_BUFFER_SIZE0 != 256
; 0000 0056 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0057 #endif
; 0000 0058 #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 0059 --rx_counter0;
;PCODE: $00000043 VOL: 0
; 0000 005A #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 005B return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 005C }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void main(void)
; 0000 0064 {
;PCODE: $0000004A VOL: 0
; 0000 0065 // Declare your local variables here
; 0000 0066 int t = 0 ;
; 0000 0067 int TXA = 30, TVA = 3, TXB = 40, TVB = 3 , TDA, TDB,T1, T2, T;
; 0000 0068 int light = 0;
; 0000 0069 int dA= 0,dB = 0;
; 0000 006A // Crystal Oscillator division factor: 1
; 0000 006B #pragma optsize-
; 0000 006C CLKPR=(1<<CLKPCE);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;	t -> R16,R17
;	TXA -> R18,R19
;	TVA -> R20,R21
;	TXB -> Y+18
;	TVB -> Y+16
;	TDA -> Y+14
;	TDB -> Y+12
;	T1 -> Y+10
;	T2 -> Y+8
;	T -> Y+6
;	light -> Y+4
;	dA -> Y+2
;	dB -> Y+0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 006D CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 006E #ifdef _OPTIMIZE_SIZE_
; 0000 006F #pragma optsize+
; 0000 0070 #endif
; 0000 0071 
; 0000 0072 // Input/Output Ports initialization
; 0000 0073 // Port B initialization
; 0000 0074 // Function: Bit7=In Bit6=In Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0075 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0076 // State: Bit7=T Bit6=T Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0077 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0078 
; 0000 0079 // Port C initialization
; 0000 007A // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 007B DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 007C // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 007D PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 007E 
; 0000 007F // Port D initialization
; 0000 0080 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0081 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0082 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0083 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0084 
; 0000 0085 // Timer/Counter 0 initialization
; 0000 0086 // Clock source: System Clock
; 0000 0087 // Clock value: Timer 0 Stopped
; 0000 0088 // Mode: Normal top=0xFF
; 0000 0089 // OC0A output: Disconnected
; 0000 008A // OC0B output: Disconnected
; 0000 008B TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 008C TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 008D TCNT0=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 008E OCR0A=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 008F OCR0B=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0090 
; 0000 0091 // Timer/Counter 1 initialization
; 0000 0092 // Clock source: System Clock
; 0000 0093 // Clock value: Timer1 Stopped
; 0000 0094 // Mode: Normal top=0xFFFF
; 0000 0095 // OC1A output: Disconnected
; 0000 0096 // OC1B output: Disconnected
; 0000 0097 // Noise Canceler: Off
; 0000 0098 // Input Capture on Falling Edge
; 0000 0099 // Timer1 Overflow Interrupt: Off
; 0000 009A // Input Capture Interrupt: Off
; 0000 009B // Compare A Match Interrupt: Off
; 0000 009C // Compare B Match Interrupt: Off
; 0000 009D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 009E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009F TCNT1H=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00A0 TCNT1L=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00A1 ICR1H=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00A2 ICR1L=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00A3 OCR1AH=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00A4 OCR1AL=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00A5 OCR1BH=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00A6 OCR1BL=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00A7 
; 0000 00A8 // Timer/Counter 2 initialization
; 0000 00A9 // Clock source: System Clock
; 0000 00AA // Clock value: Timer2 Stopped
; 0000 00AB // Mode: Normal top=0xFF
; 0000 00AC // OC2A output: Disconnected
; 0000 00AD // OC2B output: Disconnected
; 0000 00AE ASSR=(0<<EXCLK) | (0<<AS2);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00AF TCCR2A=(0<<COM2A1) | (0<<COM2A0) | (0<<COM2B1) | (0<<COM2B0) | (0<<WGM21) | (0<<WGM20);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00B0 TCCR2B=(0<<WGM22) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00B1 TCNT2=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00B2 OCR2A=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00B3 OCR2B=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00B4 
; 0000 00B5 // Timer/Counter 0 Interrupt(s) initialization
; 0000 00B6 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00B7 
; 0000 00B8 // Timer/Counter 1 Interrupt(s) initialization
; 0000 00B9 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (0<<TOIE1);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00BA 
; 0000 00BB // Timer/Counter 2 Interrupt(s) initialization
; 0000 00BC TIMSK2=(0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00BD 
; 0000 00BE // External Interrupt(s) initialization
; 0000 00BF // INT0: Off
; 0000 00C0 // INT1: Off
; 0000 00C1 // Interrupt on any change on pins PCINT0-7: Off
; 0000 00C2 // Interrupt on any change on pins PCINT8-14: Off
; 0000 00C3 // Interrupt on any change on pins PCINT16-23: Off
; 0000 00C4 EICRA=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00C5 EIMSK=(0<<INT1) | (0<<INT0);
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00C6 PCICR=(0<<PCIE2) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00C7 
; 0000 00C8 // USART initialization
; 0000 00C9 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00CA // USART Receiver: On
; 0000 00CB // USART Transmitter: On
; 0000 00CC // USART0 Mode: Asynchronous
; 0000 00CD // USART Baud Rate: 9600
; 0000 00CE UCSR0A=(0<<RXC0) | (0<<TXC0) | (0<<UDRE0) | (0<<FE0) | (0<<DOR0) | (0<<UPE0) | (0<<U2X0) | (0<<MPCM0);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00CF UCSR0B=(1<<RXCIE0) | (0<<TXCIE0) | (0<<UDRIE0) | (1<<RXEN0) | (1<<TXEN0) | (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00D0 UCSR0C=(0<<UMSEL01) | (0<<UMSEL00) | (0<<UPM01) | (0<<UPM00) | (0<<USBS0) | (1<<UCSZ01) | (1<<UCSZ00) | (0<<UCPOL0);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00D1 UBRR0H=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00D2 UBRR0L=0x67;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00D3 
; 0000 00D4 // Analog Comparator initialization
; 0000 00D5 // Analog Comparator: Off
; 0000 00D6 // The Analog Comparator's positive input is
; 0000 00D7 // connected to the AIN0 pin
; 0000 00D8 // The Analog Comparator's negative input is
; 0000 00D9 // connected to the AIN1 pin
; 0000 00DA ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00DB ADCSRB=(0<<ACME);
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00DC // Digital input buffer on AIN0: On
; 0000 00DD // Digital input buffer on AIN1: On
; 0000 00DE DIDR1=(0<<AIN0D) | (0<<AIN1D);
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00DF 
; 0000 00E0 // ADC initialization
; 0000 00E1 // ADC disabled
; 0000 00E2 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00E3 
; 0000 00E4 // SPI initialization
; 0000 00E5 // SPI disabled
; 0000 00E6 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00E7 
; 0000 00E8 // TWI initialization
; 0000 00E9 // TWI disabled
; 0000 00EA TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00EB 
; 0000 00EC // Global enable interrupts
; 0000 00ED #asm("sei")
;PCODE: $000000B2 VOL: 0
	sei
;PCODE: $000000B3 VOL: 0
; 0000 00EE 
; 0000 00EF while (1)
;PCODE: $000000B4 VOL: 0
; 0000 00F0       {
; 0000 00F1         TDA = TXB + TVB ;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00F2         TDB = TXA + TVA ;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00F3         T1 = TDB;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00F4         T2 = T1 + TXB;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00F5         T = T2 + TVB;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00F6         delay_ms(1000);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00F7       // Place your code here
; 0000 00F8          if(t <= TXA)
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00F9          {
; 0000 00FA               light = 1 << 0;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00FB               dA = TXA - t;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00FC               dB = T1 - t;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00FD 
; 0000 00FE          }
; 0000 00FF          else if (t > TXA && t <= T1)
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0100          {
; 0000 0101               light =  2;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0102               dA = T1 - t;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0103               dB = T1 - t;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0104          }
; 0000 0105          else if (t > T1 && t <= T2)
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0106          {
; 0000 0107                 light = 3;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0108                 dA = T - t;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 0109                 dB = T2 - t ;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 010A          }
; 0000 010B          else
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 010C          {
; 0000 010D                  light = 4;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 010E                  dA = T-t;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 010F                  dB = T-t  ;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0110          }
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0111            PORTB.0 = (light == 1);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0112            PORTB.1 = (light == 2);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0113            PORTB.2 = (light == 3);
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0114            PORTB.3 = (light == 4);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0115            PORTB.4 = PORTB.2 | PORTB.3;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0116            PORTB.5 = PORTB.0 | PORTB.1;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0117 
; 0000 0118           t++;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0119           if(t > T)
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 011A           t = 0;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 011B 
; 0000 011C           printf("@,%d,%d,%d\r\n",light,dA,dB);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 011D           if(rx_buffer_overflow0)
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 011E           {
; 0000 011F             if(rx_buffer0[0] == 'X')
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0120             {
; 0000 0121                  if(rx_buffer0[1] == 'A')
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0122                  {
; 0000 0123                       TXA = (rx_buffer0[6] - 48)*10 + rx_buffer0[7]-48;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0124                  }
; 0000 0125                  else
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0126                  {
; 0000 0127                        TXB = (rx_buffer0[6] - 48)*10 + rx_buffer0[7]-48;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0128                  }
;PCODE: $00000190 VOL: 0
; 0000 0129 
; 0000 012A             }
; 0000 012B             if(rx_buffer0[0] == 'V')
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 012C             {
; 0000 012D                  if(rx_buffer0[1] == 'A')
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 012E                  {
; 0000 012F                       TVA = (rx_buffer0[6] - 48)*10 + rx_buffer0[7]-48;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0130                  }
; 0000 0131                  else
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0132                  {
; 0000 0133                     TVB = (rx_buffer0[6] - 48)*10 + rx_buffer0[7]-48;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0134                  }
;PCODE: $000001B5 VOL: 0
; 0000 0135 
; 0000 0136             }
; 0000 0137 
; 0000 0138               rx_buffer_overflow0 = 0;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0139           }
; 0000 013A       }
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 013B }
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
